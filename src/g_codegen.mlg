(*
Copyright (C) 2016- National Institute of Advanced Industrial Science and Technology (AIST)

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*)

DECLARE PLUGIN "codegen_plugin"

{

let () = Mltop.add_known_plugin (fun () ->
  Feedback.msg_info Pp.(str"codegen 0.1"))
  "codegen"

(*open Cgenutil*)
open State
open Specialize
open Linear
open Genc
open Snippet
open Indimp
open Induc

open Stdarg (* for wit_string *)

(* for lconstr(...). lconstr accepts "Command 1 + 1" addition to "Command (1 + 1)"
  which is used for "CodeGen Linear", etc. *)
open Ltac_plugin
open Extraargs

open Pcoq.Prim (* for reference(id) in VERNAC ARGUMENT EXTEND *)
open Pcoq.Constr (* for constr(term) in VERNAC ARGUMENT EXTEND *)
}

(*
  CodeGen Inductive Type COQ_TYPE => "C_TYPE".
  CodeGen Inductive Match COQ_TYPE => "C_SWFUNC" ( | CONSTRUCTOR => "C_CASELABEL" "C_ACCESSOR"* )*.
  CodeGen Primitive CONSTRUCTOR ARG_OR_HOLE* => "C_CONSTRUCTOR".
  CodeGen Constant CONSTRUCTOR ARG* => "C_CONSTANT".

  Print CodeGen Inductive.              show all inductive types for codegen.
  Print CodeGen Inductive COQ_TYPE*     show the specified inductive types for codegen.

  Example:

  CodeGen Inductive Type bool => "bool".
  CodeGen Inductive Match bool => "" | true => "default" | false => "case 0".
  CodeGen Primitive true => "true".
  CodeGen Primitive false => "false".
  Print CodeGen Inductive bool.

  CodeGen Inductive Type nat => "uint64_t".
  CodeGen Inductive Match nat => "" | O "case 0" | S "default" "pred".
  CodeGen Primitive O => "0".
  CodeGen Primitive S => "succ".
  Print CodeGen Inductive nat.

  CodeGen Inductive Type option bool => "int".
  CodeGen Inductive Match option bool => "" | None => "case -1" | Some => "default" "".
  CodeGen Primitive None bool => "(-1)".
  CodeGen Primitive Some bool => "(int)".
  Print CodeGen Inductive (option bool).

  Print CodeGen Inductive.
*)

(*
  CodeGen Arguments FUNCTION SorD*.
  CodeGen AutoArguments FUNCTION*.
  CodeGen Function FUNCTION ARG_OR_HOLE* => "C_FUNCNAME" PRESIMP_NAME SIMPLIFIED_NAME.
  CodeGen Static Function FUNCTION ARG_OR_HOLE* => "C_FUNCNAME" PRESIMP_NAME SIMPLIFIED_NAME.
  CodeGen Primitive FUNCTION ARG_OR_HOLE* => "C_FUNCNAME" PRESIMP_NAME.
  CodeGen Constant FUNCTION ARG* => "C_CONSTANT" PRESIMP_NAME.

  CodeGen Snippet "...".
  CodeGen IndImp COQ_TYPE.

  CodeGen GenerateFile "FILENAME".
  CodeGen GenerateTest.
  CodeGen Gen FUNCTION_OR_C_FUNCNAME+.

  CodeGen Global Inline QUALID...
  CodeGen Local Inline QUALID QUALID...

  CodeGen Simplify Function C_FUNCNAME*.
  CodeGen Simplify Dependencies C_FUNCNAME*.

  CodeGen Linear COQ_TYPE.
  CodeGen LinearCheck FUNCTION*.

  Print CodeGen Specialization.
  Print CodeGen Specialization FUNCTION+.

  "CodeGen Function", "CodeGen Static Function" and "CodeGen Primitive"
  declares C function name for a Gallina function.
  "CodeGen GenerateFile" generates functions declared by
  "CodeGen Function" and "CodeGen Static Function".
  The actual C definition of functions declared by "CodeGen Primitive"
  should be provided by a user.

  Example:

  CodeGen Arguments id s d.
  CodeGen Function id nat.
  CodeGen Function id nat => id_nat.
  CodeGen Function id nat => id_nat id_nat_specialized.
  CodeGen Function id nat => "id_nat".
  CodeGen Function id nat => "id_nat" id_nat.
  CodeGen Function id nat => "id_nat" id_nat id_nat_specialized.

  CodeGen Simplify Function id nat

  Print CodeGen Specialization id.

*)

(*
  CodeGen IndImp COQ_TYPE.
*)

VERNAC ARGUMENT EXTEND ind_cstr_caselabel_accessors
| [ "|" ident(coq_cstr) "=>" string(caselabel) string_list(accessors) ] ->
  { (coq_cstr, caselabel, accessors) }
END

VERNAC ARGUMENT EXTEND s_or_d
| [ "s" ] -> { SorD_S }
| [ "d" ] -> { SorD_D }
END

VERNAC ARGUMENT EXTEND id_or_underscore
| [ ident(id) ] -> { Some id }
| [ "_" ] -> { None }
END

VERNAC ARGUMENT EXTEND string_or_qualid
| [ string(s) ] -> { StrOrQid_Str s }
| [ reference(qid) ] -> { StrOrQid_Qid qid }
END

(*
  The order of constr(term) and "_" is important to parse "_" as None,
  since "_" is valid expression as a constr,
*)
VERNAC ARGUMENT EXTEND constr_or_underscore
| [ constr(term) ] -> { Some term }
| [ "_" ] -> { None }
END

VERNAC ARGUMENT EXTEND sp_instance_names3
| [ "=>" string_opt(cfunc) id_or_underscore(presimp_id) id_or_underscore(simplified_id) ] -> { { spi_cfunc_name = cfunc; spi_presimp_id = presimp_id; spi_simplified_id = simplified_id } }
| [ "=>" string_opt(cfunc) id_or_underscore(presimp_id) ] -> { { spi_cfunc_name = cfunc; spi_presimp_id = presimp_id; spi_simplified_id = None } }
| [ "=>" string_opt(cfunc) ] -> { { spi_cfunc_name = cfunc; spi_presimp_id = None; spi_simplified_id = None } }
| [ ] -> { { spi_cfunc_name = None; spi_presimp_id = None; spi_simplified_id = None } }
END

VERNAC ARGUMENT EXTEND sp_instance_names2
| [ "=>" string_opt(cfunc) id_or_underscore(presimp_id) ] -> { { spi_cfunc_name = cfunc; spi_presimp_id = presimp_id; spi_simplified_id = None } }
| [ "=>" string_opt(cfunc) ] -> { { spi_cfunc_name = cfunc; spi_presimp_id = None; spi_simplified_id = None } }
| [ ] -> { { spi_cfunc_name = None; spi_presimp_id = None; spi_simplified_id = None } }
END

VERNAC ARGUMENT EXTEND ind_constructor
| [ "|" ident(coq_cstr) "=>" string(c_cstr) ] -> { { ic_coq_cstr = coq_cstr; ic_c_cstr = c_cstr } }
END

VERNAC ARGUMENT EXTEND string_or_none
| [ string(s) ] -> { Some s }
| [ "None" ] -> { None }
END

VERNAC ARGUMENT EXTEND genflag
| [ "DisableDependencyResolver" ] -> { DisableDependencyResolver }
| [ "DisableMutualRecursionDetection" ] -> { DisableMutualRecursionDetection }
END

VERNAC COMMAND EXTEND CodeGenQuery CLASSIFIED AS QUERY
    | [ "Print" "CodeGen" "Inductive" constr_list(coq_type_list)] ->
      { command_print_inductive coq_type_list }
    | [ "Print" "CodeGen" "Specialization" ref_list(funcs)] ->
      { command_print_specialization funcs }
    | [ "Print" "CodeGen" "Generation" "List"] ->
      { command_print_generation_map () }
END

VERNAC COMMAND EXTEND CodeGen CLASSIFIED AS SIDEFF
    | [ "CodeGen" "Inductive" "Type" lconstr(coq_type) "=>" string(c_type) ] ->
      { command_ind_type coq_type c_type }
    | [ "CodeGen" "Inductive" "Match" lconstr(coq_type) "=>" string(swfunc) ind_cstr_caselabel_accessors_list(cstr_caselabel_accesors_list) ] ->
      { command_ind_match coq_type swfunc cstr_caselabel_accesors_list }

    | [ "CodeGen" "Arguments" ref(func) s_or_d_list(sd_list) ] ->
      { command_arguments func sd_list }
    | [ "CodeGen" "AutoArguments" ref_list(func_list) ] ->
      { command_auto_arguments func_list }

    | [ "CodeGen" "Function" ref(func) constr_or_underscore_list(args) sp_instance_names3(names) ] ->
      { command_function func args names }
    | [ "CodeGen" "Static" "Function" ref(func) constr_or_underscore_list(args) sp_instance_names3(names) ] ->
      { command_static_function func args names }
    | [ "CodeGen" "Primitive" ref(func) constr_or_underscore_list(args) sp_instance_names2(names) ] ->
      { command_primitive func args names }
    | [ "CodeGen" "Constant" ref(func) constr_list(args) sp_instance_names2(names) ] ->
      { command_constant func args names }

    | [ "CodeGen" "Snippet" string(str) ] -> { command_snippet str }
    | [ "CodeGen" "Header" "Snippet" string(str) ] -> { command_header_snippet str }

    | [ "CodeGen" "IndImp" constr(coq_type) ] ->
      { command_indimp coq_type }

    | [ "CodeGen" "Gen" ne_string_or_qualid_list(cfunc_list) ] -> { command_gen cfunc_list }

    | [ "CodeGen" "Header" "File" string_or_none(fnopt) ] -> { current_header_filename := fnopt }
    | [ "CodeGen" "Source" "File" string_or_none(fnopt) ] -> { current_source_filename := fnopt }

    | [ "CodeGen" "GenerateFile" genflag_list(gflist) ] -> { command_generate_file gflist }
    | [ "CodeGen" "GenerateTest" genflag_list(gflist) ] -> { command_generate_test gflist }

    | [ "CodeGen" "Global" "Inline" ref_list(funcs) ] ->
      { command_global_inline funcs }
    | [ "CodeGen" "Local" "Inline" ref(func) ref_list(funcs) ] ->
      { command_local_inline func funcs }

    | [ "CodeGen" "Simplify" "Function" string_list(cfuncs) ] ->
      { command_simplify_function cfuncs }
    | [ "CodeGen" "Simplify" "Dependencies" string_list(cfuncs) ] ->
      { command_simplify_dependencies cfuncs }

    | [ "CodeGen" "Resolve" "Dependencies" ] ->
      { command_resolve_dependencies () }

    | [ "CodeGen" "Linear" lconstr(ty) ] ->
      { command_linear ty }
    | [ "CodeGen" "LinearCheck" ne_global_list(libref_list) ] ->
      { command_linear_check libref_list }
    | [ "CodeGen" "LinearTest" constr(t1) constr(t2) ] ->
      { command_linear_test t1 t2 }
    | [ "CodeGen" "Test" "Linear" "Type" lconstr(t) ] ->
      { command_test_linear t }
    | [ "CodeGen" "Test" "Unrestricted" "Type" lconstr(t) ] ->
      { command_test_unrestricted t }

    | [ "CodeGen" "Deallocator" ref(ind_or_cstr) constr_list(args) "=>" string(cfunc) ] ->
      { command_deallocator_type ind_or_cstr args cfunc }

    | [ "CodeGen" "Downward" lconstr(ty) ] -> { command_downward ty }
    | [ "CodeGen" "BorrowFunction" ref(f) ] -> { command_borrow_function f }
    | [ "CodeGen" "BorrowType" lconstr(ty) ] -> { command_borrow_type ty }
    | [ "CodeGen" "TestBorrowCheck" lconstr(t) ] -> { command_test_borrowcheck t }

    (*| [ "CodeGen" "ShowLocalGensymID" ] -> { command_show_local_gensym_id () }*)
END
