(*
Copyright (C) 2016- National Institute of Advanced Industrial Science and Technology (AIST)

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*)

DECLARE PLUGIN "codegen_plugin"

{

let () = Mltop.add_known_plugin (fun () ->
  Feedback.msg_info Pp.(str"codegen 0.1"))
  "codegen"

open Monomorph
open Specialize
open Linear
open Genc
open Cgenutil
open Ind

open Stdarg (* for wit_string *)
(*open Constrarg*) (* for wit_global *)

(* for lconstr(...). lconstr accepts "Com 1 + 1" addition to "Com (1 + 1)"
  which is used as Terminate Monomorphization id unit. *)
open Ltac_plugin
open Extraargs

open Pcoq.Prim (* for reference(id) in VERNAC ARGUMENT EXTEND *)
open Pcoq.Constr (* for constr(term) in VERNAC ARGUMENT EXTEND *)
}

(*
  CodeGen Inductive Type COQ_TYPE => "C_TYPE".
  CodeGen Inductive Constructor COQ_TYPE | CONSTRUCTOR => "C_CONSTRUCTOR".
  CodeGen Inductive Match COQ_TYPE => "C_SWFUNC" ( | CONSTRUCTOR => "C_CASELABEL" "C_ACCESSOR"* )*.

  Print CodeGen Inductive.              show all inductive types for codegen.
  Print CodeGen Inductive COQ_TYPE*     show the specified inductive types for codegen.

  Example:

  CodeGen Inductive Type bool => "bool".
  CodeGen Inductive Constructor bool | true => "true".
  CodeGen Inductive Constructor bool | false => "false".
  CodeGen Inductive Match bool => "" | true => "default" | false => "case 0".
  Print CodeGen Inductive bool.

  CodeGen Inductive Type nat => "uint64_t".
  CodeGen Inductive Constructor nat | O "0".
  CodeGen Inductive Constructor nat | S "succ".
  CodeGen Inductive Match nat => "" | O "case 0" | S "default" "pred".
  Print CodeGen Inductive nat.

  CodeGen Inductive Type option bool => "int".
  CodeGen Inductive Constructor option bool | None => "(-1)".
  CodeGen Inductive Constructor option bool | Some => "(int)".
  CodeGen Inductive Match option bool => "" | None => "case -1" | Some => "default" "".
  Print CodeGen Inductive (option bool).

  Print CodeGen Inductive.
*)

(*
  CodeGen Specialization Arguments FUNCTION SorD*.
  CodeGen Specialization Instance FUNCTION ARG_OR_HOLE* => "C_FUNCNAME" PARTAPP_NAME SPECIALIZED_NAME.

  Print CodeGen Specialization.
  Print CodeGen Specialization FUNCTION+.

  Example:

  CodeGen Specialization Arguments id s d.
  CodeGen Specialization Instance id nat.
  CodeGen Specialization Instance id nat => id_nat.
  CodeGen Specialization Instance id nat => id_nat id_nat_specialized.
  CodeGen Specialization Instance id nat => "id_nat".
  CodeGen Specialization Instance id nat => "id_nat" id_nat.
  CodeGen Specialization Instance id nat => "id_nat" id_nat id_nat_specialized.

  CodeGen Specialization Specialize id nat

  Print CodeGen Specialization id.

  CodeGen Global Inline QUALID...
  CodeGen Local Inline QUALID QUALID...

*)

VERNAC ARGUMENT EXTEND ind_cstr_caselabel_accessors
| [ "|" ident(coq_cstr) "=>" string(caselabel) string_list(accessors) ] ->
  { (coq_cstr, caselabel, accessors) }
END

VERNAC ARGUMENT EXTEND s_or_d
| [ "s" ] -> { SorD_S }
| [ "d" ] -> { SorD_D }
END

VERNAC ARGUMENT EXTEND id_or_underscore
| [ ident(id) ] -> { Some id }
| [ "_" ] -> { None }
END

(*
  The order of constr(term) and "_" is important to parse "_" as None,
  since "_" is valid expression as a constr,
*)
VERNAC ARGUMENT EXTEND constr_or_underscore
| [ constr(term) ] -> { Some term }
| [ "_" ] -> { None }
END

VERNAC ARGUMENT EXTEND sp_instance_names
| [ "=>" string_opt(cfunc) id_or_underscore(partapp_id) id_or_underscore(specialized_id) ] -> { { spi_cfunc_name = cfunc; spi_partapp_id = partapp_id; spi_specialized_id = specialized_id } }
| [ "=>" string_opt(cfunc) id_or_underscore(partapp_id) ] -> { { spi_cfunc_name = cfunc; spi_partapp_id = partapp_id; spi_specialized_id = None } }
| [ "=>" string_opt(cfunc) ] -> { { spi_cfunc_name = cfunc; spi_partapp_id = None; spi_specialized_id = None } }
| [ ] -> { { spi_cfunc_name = None; spi_partapp_id = None; spi_specialized_id = None } }
END

VERNAC ARGUMENT EXTEND ind_constructor
| [ "|" ident(coq_cstr) "=>" string(c_cstr) ] -> { { ic_coq_cstr = coq_cstr; ic_c_cstr = c_cstr } }
END

VERNAC COMMAND EXTEND CodeGenQuery CLASSIFIED AS QUERY
    | [ "Print" "CodeGen" "Inductive" constr_list(coq_type_list)] ->
      { codegen_print_inductive coq_type_list }
    | [ "Print" "CodeGen" "Specialization" ref_list(funcs)] ->
      { codegen_print_specialization funcs }

    (*
    | [ "CodeGen" "ArgTest" constr(x) ] ->
      { Feedback.msg_info (Pp.str (constr_expr_cstr_name x)) }
    | [ "CodeGen" "ArgTest2" constr_or_underscore(x) ] ->
      { Feedback.msg_info (Pp.str (match x with None -> "None" | Some _ -> "Some"))}
    | [ "CodeGen" "ArgTest3" lconstr(term) "=>" ] ->
      { let env = Global.env () in let sigma = Evd.from_env env in
        Feedback.msg_info (Ppconstr.pr_constr_expr env sigma term) }
    *)
    | [ "CodeGen" "ArgTest4" lconstr(term) ] ->
      { let env = Global.env () in let sigma = Evd.from_env env in
        let (sigma, term) = Constrintern.interp_constr_evars env sigma term in
        let term = abstract_evars env sigma term in
        Feedback.msg_info (Printer.pr_econstr_env env sigma term) }
END

VERNAC COMMAND EXTEND CodeGen CLASSIFIED AS SIDEFF
    | [ "CodeGen" "Inductive" "Type" lconstr(coq_type) "=>" string(c_type) ] ->
      { register_ind_type coq_type c_type }
    | [ "CodeGen" "Inductive" "Constructor" lconstr(coq_type) ind_constructor_list(cstr_namepair_list) ] ->
      { register_ind_cstr coq_type cstr_namepair_list }
    | [ "CodeGen" "Inductive" "Match" constr(coq_type) "=>" string(swfunc) ind_cstr_caselabel_accessors_list(cstr_caselabel_accesors_list) ] ->
      { register_ind_match coq_type swfunc cstr_caselabel_accesors_list }

    | [ "CodeGen" "Specialization" "Arguments" ref(func) s_or_d_list(sd_list) ] ->
      { codegen_specialization_arguments func sd_list }
    | [ "CodeGen" "Specialization" "AutoArguments" ref_list(func_list) ] ->
      { codegen_specialization_auto_arguments func_list }

    | [ "CodeGen" "Specialization" "Instance" ref(func) constr_or_underscore_list(args) sp_instance_names(names) ] ->
      { codegen_specialization_instance func args names }

    | [ "CodeGen" "Global" "Inline" ref_list(funcs) ] ->
      { codegen_global_inline funcs }
    | [ "CodeGen" "Local" "Inline" ref(func) ref_list(funcs) ] ->
      { codegen_local_inline func funcs }

    | [ "CodeGen" "Specialization" "Specialize" ref(func) constr_or_underscore_list(args) ] ->
      { codegen_specialization_specialize func args }

    | [ "CodeGen" "Monomorphization" ne_global_list(libref_list) ] ->
      { monomorphization libref_list }
    | [ "CodeGen" "Terminate" "Monomorphization" lconstr(term) ] ->
      { terminate_monomorphization term }
    | [ "CodeGen" "Linear" lconstr(ty) ] ->
      { register_linear_type ty }
    | [ "CodeGen" "LinearCheck" ne_global_list(libref_list) ] ->
      { linear_type_check_list libref_list }
    | [ "CodeGen" "LinearTest" constr(t1) constr(t2) ] ->
      { linear_type_check_test t1 t2 }
    | [ "CodeGen" "GenC" ne_global_list(libref_list) ] -> { genc libref_list }
    | [ "CodeGen" "GenCFile" string(fn) ne_global_list(libref_list) ] ->
      { genc_file fn libref_list }
END
