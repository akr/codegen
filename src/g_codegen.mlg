(*
Copyright (C) 2016- National Institute of Advanced Industrial Science and Technology (AIST)

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*)

DECLARE PLUGIN "codegen_plugin"

{

let () = Mltop.add_known_plugin (fun () ->
  Feedback.msg_info Pp.(str"codegen 0.1"))
  "codegen"

open Monomorph
open Linear
open Genc

open Stdarg (* for wit_string *)
(*open Constrarg*) (* for wit_global *)

(* for lconstr(...). lconstr accepts "Com 1 + 1" addition to "Com (1 + 1)"
  which is used as Terminate Monomorphization id unit. *)
open Ltac_plugin
open Extraargs

open Pcoq.Prim (* for reference(id) in VERNAC ARGUMENT EXTEND *)
(* open Pcoq.Constr *) (* for global(id) in VERNAC ARGUMENT EXTEND *)
}

(*
  CodeGen Inductive Type COQ_TYPE "C_TYPE".
  CodeGen Inductive Constructor COQ_TYPE CONSTRUCTOR "C_CONSTRUCTOR".
  CodeGen Inductive Match COQ_TYPE "C_SWFUNC" (CONSTRUCTOR "C_CASELABEL" "C_ACCESSOR"...)*.

  Print CodeGen Inductive.              show all inductive types for codegen.
  Print CodeGen Inductive COQ_TYPE...   show the specified inductive types for codegen.

  Example:

  CodeGen Inductive Type bool "bool".
  CodeGen Inductive Constructor bool true "true".
  CodeGen Inductive Constructor bool false "false".
  CodeGen Inductive Match bool "" true "default" false "case 0".
  Print CodeGen Inductive bool.

  CodeGen Inductive Type nat "uint64_t".
  CodeGen Inductive Constructor nat O "0".
  CodeGen Inductive Constructor nat S "succ".
  CodeGen Inductive Match nat "" O "case 0" S "default" "pred".
  Print CodeGen Inductive nat.

  CodeGen Inductive Type (option bool) "int".
  CodeGen Inductive Constructor (option bool) None "(-1)".
  CodeGen Inductive Constructor (option bool) Some "(int)".
  CodeGen Inductive Match (option bool) "" None "case -1" Some "default" "".
  Print CodeGen Inductive (option bool).

  Print CodeGen Inductive.
*)

VERNAC ARGUMENT EXTEND ind_cstr_caselabel_accessors
| [ ident(coq_cstr) string(caselabel) string_list(accessors) ] ->
  { (coq_cstr, caselabel, accessors) }
END

VERNAC COMMAND EXTEND CodeGenQuery CLASSIFIED AS QUERY
    | [ "Print" "CodeGen" "Inductive" constr_list(coq_type_list)] ->
      { codegen_print_inductive coq_type_list }
END

VERNAC COMMAND EXTEND CodeGen CLASSIFIED AS SIDEFF
    | [ "CodeGen" "Inductive" "Type" constr(coq_type) string(c_type) ] ->
      { register_ind_type coq_type c_type }
    | [ "CodeGen" "Inductive" "Constructor" constr(coq_type) ident(coq_cstr) string(c_cstr) ] ->
      { register_ind_cstr coq_type coq_cstr c_cstr }
    | [ "CodeGen" "Inductive" "Match" constr(coq_type) string(swfunc) ind_cstr_caselabel_accessors_list(cstr_caselabel_accesors_list) ] ->
      { register_ind_match coq_type swfunc cstr_caselabel_accesors_list }

    | [ "CodeGen" "Monomorphization" ne_global_list(libref_list) ] ->
      { monomorphization libref_list }
    | [ "CodeGen" "Terminate" "Monomorphization" lconstr(term) ] ->
      { terminate_monomorphization term }
    | [ "CodeGen" "Linear" lconstr(ty) ] ->
      { register_linear_type ty }
    | [ "CodeGen" "LinearCheck" ne_global_list(libref_list) ] ->
      { linear_type_check_list libref_list }
    | [ "CodeGen" "LinearTest" constr(t1) constr(t2) ] ->
      { linear_type_check_test t1 t2 }
    | [ "CodeGen" "GenC" ne_global_list(libref_list) ] -> { genc libref_list }
    | [ "CodeGen" "GenCFile" string(fn) ne_global_list(libref_list) ] ->
      { genc_file fn libref_list }
END
